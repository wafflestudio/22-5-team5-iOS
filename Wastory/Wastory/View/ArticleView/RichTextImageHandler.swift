//
//  RichTextImageHandler.swift
//  Wastory
//
//  Created by mujigae on 1/29/25.
//

import SwiftUI
import Kingfisher

@MainActor
class RichTextImageHandler {
    // Ïù¥ÎØ∏ÏßÄÎ•º URLÎ°ú Î≥ÄÌôòÌïòÍ≥† NSAttributedStringÏùÑ ÏàòÏ†ïÌïòÎäî Ìï®Ïàò
    static func convertImagesToURLs(_ attributedString: NSAttributedString) async -> NSAttributedString {
        let mutableAttributedString = NSMutableAttributedString(attributedString: attributedString)
        
        attributedString.enumerateAttribute(.attachment, in: NSRange(location: 0, length: attributedString.length)) { value, range, _ in
            guard let attachment = value as? NSTextAttachment,
                  let image = attachment.image else { return }
            
            // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Î∞è URL ÌöçÎìù
            Task {
                do {
                    let imageURL = try await NetworkRepository.shared.postImage(image)
                    let urlAttachment = NSTextAttachment()
                    urlAttachment.bounds = attachment.bounds
                    
                    // URLÏùÑ Ï†ÄÏû•Ìï† Ïª§Ïä§ÌÖÄ ÏÜçÏÑ± Ï∂îÍ∞Ä
                    let attributes: [NSAttributedString.Key: Any] = [
                        .attachment: urlAttachment,
                        .customImageURL: imageURL
                    ]
                    
                    let replacementString = NSAttributedString(string: "üì∑", attributes: attributes)
                    mutableAttributedString.replaceCharacters(in: range, with: replacementString)
                } catch {
                    print("Error: \(error.localizedDescription)")
                }
            }
        }
        
        return mutableAttributedString
    }
    
    // URLÎ°úÎ∂ÄÌÑ∞ Ïù¥ÎØ∏ÏßÄÎ•º Îã§Ïö¥Î°úÎìúÌïòÏó¨ NSAttributedStringÏùÑ Î≥µÏõêÌïòÎäî Ìï®Ïàò
    static func restoreImagesFromURLs(_ attributedString: NSAttributedString) async -> NSAttributedString {
        let mutableAttributedString = NSMutableAttributedString(attributedString: attributedString)
        
        attributedString.enumerateAttribute(.customImageURL, in: NSRange(location: 0, length: attributedString.length)) { value, range, _ in
            guard let imageURL = value as? String else { return }
            
            Task {
                if let image = try? await KingfisherManager.shared.retrieveImage(with: .network(imageURL as! Resource)).image {
                    let imageAttachment = NSTextAttachment()
                    imageAttachment.image = image
                    
                    let replacementString = NSAttributedString(attachment: imageAttachment)
                    mutableAttributedString.replaceCharacters(in: range, with: replacementString)
                }
            }
        }
        
        return mutableAttributedString
    }
}

// Ïª§Ïä§ÌÖÄ ÏÜçÏÑ± ÌÇ§ Ï†ïÏùò
extension NSAttributedString.Key {
    static let customImageURL = NSAttributedString.Key("customImageURL")
}
